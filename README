/******************************************************************************
* Copyright (C) 2010 - 2021 Xilinx, Inc. All rights reserved.
* SPDX-License-Identifier: Apache-2.0
******************************************************************************/

1. Development Guide

    If you want to cross compile the source in Linux PC machine, follow these steps, otherwise skip this section.

    1. Refer to the `K260 SOM Starter Kit Tutorial` to build the cross-compilation SDK, and install it to the path you choose or default. Suppose it's SDKPATH.

    2. Run "./build.sh ${SDKPATH}" in the source code folder of current application, to build the application.

    3. The build process in [1.2] will produce a rpm package aibox-reid-1.0.1-1.aarch64.rpm under build/, upload to the board, and run "rpm -ivh --force ./aibox-reid-1.0.1-1.aarch64.rpm" to update install.

2. Setting up the Board

	1. Get the SD Card Image from [Boot Image Site](https://xilinx.github.io/kria-apps-docs/2021.1/build/html/index.html) and follow the instructions in UG1089 to burn the SD card. And install the SD card to J11.

	This guide and prebuilt is target for Ubuntu and 22.1. The previious version of this application (21.1) which is targeted to Petalinux is still available (https://xilinx.github.io/kria-apps-docs/2021.1/build/html/index.html).

    2. Hardware Setup:

        * Monitor:

          This application requires **4K** monitor, so that up to 4 channels of 1080p video could be displayed.

          Before booting the board, please connect the monitor to the board via either DP or HDMI port.

        * UART/JTAG interface:

          For interacting and seeing boot-time information, connect a USB debugger to the J4.

        * Network connection:

          Connect the Ethernet cable to your local network with DHCP enabled to install packages and run Jupyter Notebooks

	3. Power on the board, and booting your Starter Kit (Ubuntu):

	   * Follow the instruction from the page below to boot linux

		https://www.xilinx.com/products/som/kria/kr260-robotics-starter-kit/kr260-getting-started/booting-your-starter-kit.html

	> **Note:** Steps under the section "Set up the Xilinx Development & Demonstration Environment for Ubuntu 22.04 LTS" may not be needed for TSN-ROS demo.

	4. Set System Timezone and locale:

		* Set timezone

		   ```bash
			sudo timedatectl set-ntp true
			sudo timedatectl set-timezone America/Los_Angeles
			timedatectl
		   ```
		
		* Set locale

		   ```bash
			sudo locale-gen en_US en_US.UTF-8
			sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
			export LANG=en_US.UTF-8
			locale
		   ```

	5. Update Bootfirmware

	The SOM Starter Kits have factory pre-programmed boot firmware that is installed and maintained in the SOM QSPI device. Update the Boot firmware in the SOM QSPI device to '2022.1 Boot FW' Image.

	Follow the link below to obtain Boot firmware binary and instructions to update QSPI image using xmutil, after linux boot.  

	https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/1641152513/Kria+K26+SOM#Boot-Firmware-Updates

	6. Install Docker from [here]{https://docs.docker.com/engine/install/ubuntu/}

	7. Get the latest kv260-aibox-reid firmware package:

		* Add archive for the Xilinx Apps demo

		  ```bash
		  sudo add-apt-repository ppa:xilinx-apps
		  sudo apt update
		  sudo apt upgrade
		  ```

		* Search package feed for packages compatible with Kv260

		  ```bash
		  sudo xmutil getpkgs
		  ```

		  An example output is show below

		  ```bash
		  Searching package feed for packages compatible with: kv260

		  xlnx-app-kv260-aibox-reid/jammy 0.0.20220621.4729324-0xlnx3 arm64 demo application for Xilinx boards - kv260 aibox-reid application
		  xlnx-app-kv260-aibox-reid/jammy 0.1-0xlnx1 arm64
		  ```

		* Install firmware binaries and restart dfx-mgr

		   ```bash
		  sudo apt install xlnx-firmware-kv260-aibox-reid
		  sudo systemctl restart dfx-mgr.service
		  ```

		  > Note : Installing firmware binaries (xlnx-firmware-kv260-aibox-reid) causes dfx-mgr to crash and a restart is needed, which is listed in the known issues section. Once this is fixed an newer updates are available for dfx-manager, restart may not be needed.
	  
	8. Dynamically load the application package:

		The firmware consist of bitstream, device tree overlay (dtbo) file. The firmware is loaded dynamically on user request once Linux is fully booted. The xmutil utility can be used for that purpose.

		* Disable the desktop environment:

		   ```bash
		   sudo xmutil      desktop_disable
		   ```

		   After running the application, the desktop environment can be enable again with:

		   ```bash
		   sudo xmutil      desktop_enable
		   ```

		* Show the list and status of available acceleration platforms :

		   ```bash
		  sudo xmutil listapps
			```

	   * Switch to a different platform for different AI Application:

		  * When xmutil listapps reveals that no accelerator is currently active, just activate kv260-aibox-reid:

			 ```
			 sudo xmutil      dp_unbind
			 sudo xmutil      loadapp kv260-aibox-reid
			 sudo xmutil      dp_bind
			 ```

		  * When xmutil listapps reveals that there's already another accelerator being activated apart from kv260-aibox-reid, unload it first, then switch to kv260-aibox-reid.

			 ```
			 sudo xmutil      dp_unbind
			 sudo xmutil      unloadapp
			 sudo xmutil      loadapp kv260-aibox-reid
			 sudo xmutil      dp_bind
			 ```

	9. Pull the latest docker image for aibox-reid using the below command.

		```bash
		docker pull xilinx/aibox-reid:latest
		```

	10. Launch the docker using the below command

		```bash
		docker run \
		--env="DISPLAY" \
		-h "xlnx-docker" \
		--env="XDG_SESSION_TYPE" \
		--net=host \
		--privileged \
		--volume="$HOME/.Xauthority:/root/.Xauthority:rw" \
		-v /tmp:/tmp \
		-v /dev:/dev \
		-v /sys:/sys \
		-v /etc/vart.conf:/etc/vart.conf \
		-v /lib/firmware/xilinx:/lib/firmware/xilinx \
		-v /run:/run \
		-it xilinx/aibox-reid:latest bash
		```

		It will launch the aibox-reid image in a new container

		```bash
		root@xlnx-docker/#
		```
	11. The storage volume on the SD card is limited with multiple dockers. You can use following command to remove the existing container.

		```
		sudo docker rmi --force aibox-reid
		```

3. How to run the application:

    1. Two types of input sources

        The AIBOX application is targeted to run with RTSP streams as input source, but for convienience, we also support video files as input.

        We assume the RTSP or video file to be **1080P H264/H265**

         * RTSP source

           IP camerars normally have a configuration page to configure the RTSP stream related parameters. Please refer to the manual of your camera, and configure it to **1080P H264/H265**, and get the RTSP URL to be used as input parameter for the AIBox application. The URL is in the form of "rtsp://user:passwd@ip-address:port/name"

         * File source

            To demonstrate the application in the case where no IP camera is available, a video source may be played from a file on the SD card instead.
            You can download video files from the following links, which is of MP4 format.

            * https://pixabay.com/videos/liverpool-people-couple-pier-head-46090/
            * https://pixabay.com/videos/liverpool-pier-head-england-uk-46098/
            * https://pixabay.com/videos/spring-walk-park-trees-flowers-15252/
            * https://pixabay.com/videos/walking-people-city-bucharest-6099/

            Then you need to transcode it to H264 file which is the supported input format.

            > ffmpeg -i input-video.mp4 -c:v libx264 -pix_fmt nv12 -r 30 output.nv12.h264

            Finally, please upload or copy these transcoded H264 files to the board, place it to somewhere under /tmp.

    2. Interacting with the application

        There are two ways to interact with application, via Jyputer notebook or Command line 

        1. Juypter notebook

            Use a web-browser (e.g. Chrome, Firefox) to interact with the platform.

            The Jupyter notebook URL can be found with command:

            > sudo jupyter notebook list

            Output example:

            > Currently running servers:
            >
            > `http://ip:port/?token=xxxxxxxxxxxxxxxxxx`  :: 

        2. Command Line

            **Note** The application needs to be run with ***sudo*** .

            * Examples:

                * Run one channel RTSP stream 
                   > sudo aibox-reid -s rtsp://username:passwd@ip_address:port/name -t rtsp -p 0 

                * Run one channel video file
                   > sudo aibox-reid -s /tmp/movies/shop.nv12.30fps.1080p.h264 -t file -p 1

                * Run multiple channels
                  > sudo aibox-reid -s rtsp://username:passwd@ip_address:port/name -t rtsp -p 2 -s /tmp/movies/shop.nv12.30fps.1080p.h264 -t file -p 1 

                **Note** Only one instance of aibox-reid application can run at a time because it requires exclusive access to a DPU engine and there is only one instance of DPU that exists in the aibox-reid platform.

            * Command Options:

              The examples show the capability of the aibox-reid for specific configurations. User can get more and detailed application options as following by invoking 

              `   aibox-reid --help`

              ```
                 Usage:

                 aibox-reid [OPTION?] - AI Application of pedestrian + reid + tracking for multi RTSP streams, on SoM board of Xilinx

                 Help Options:

                 -h, --help      Show help options

                      --help-all                                       Show all help options
                      --help-gst                                       Show GStreamer Options

                 Application Options:

                      -s, --src=[rtsp://server:port/id |file path]     URI of rtsp src, or location of h264|h265 video file. Must set. Can set up to 4 times
                      -t, --srctype=[f|file, r|rtsp]                   Type of the input source: file (f)|rtsp (r). Optional. Can set up to 4 times.
                      -e, --srcenc=[h264|h265]                         Encoding type of the input source. Optional. Can set up to 4 times.
                      -p, --pos=[0|1|2|3]                              Location of the display in the 4 grids of 4k monitor. Optional. 
                                                                       0: top left, 1: top right, 2: bottom left, 3: bottom right. Optional. Can set up to 4 times.
                      -r, --framerate                                  Framerate of the input. Optional. Can set up to 4 times.
                      -R, --report                                     Report fps
              ```

4. Files structure

    The application is installed as:

    * Binary File Directory: /opt/xilinx/bin

        | filename    | description |
        |-------------|-------------|
        |aibox-reid   | main app    |

    * Configuration file directory: /opt/xilinx/share/vvas/aibox-reid

        | filename         | description                                  |
        |------------------|----------------------------------------------|
        |ped_pp.json       |           Config of preprocess for refinedet.
        | refinedet.json   |           Config of refinedet.
        | crop.json        |           Config of cropping for reid.
        | reid.json        |           Config of reid.
        | draw_reid.json   |           Config of final results drawing.
		
    * Configuration File Directory: /opt/xilinx/kv260-aibox-reid/share/vitis_ai_library/models
    
        The model files integrated in the application use the B3136 DPU configuration.

        | foldername | description |
        |----------|-------------|
        |personreid-res18_pt | Model files for reid|
        |refinedet_pruned_0_96| Model files for refinedet| 	 

    * Jupyter Notebook Directory: /opt/xilinx/share/notebooks/aibox-reid

        | filename         | description |
        |------------------|-------------|
        |aibox-reid.ipynb  | Jupyter notebook file for aibox-reid.|
